React requires 3 basic libraries

		a) react
		b) react-dom
		c) babel


         - "React"  is the core library for all basic React functions. 
    - "React-DOM" is the library for handling Virtual DOM.	
    - "Babel" is the compiler for JavaScript in React.

CDN Links:
	https://legacy.reactjs.org/docs/cdn-links.html  		=> react CDN

	https://babeljs.io/docs/babel-standalone			=> babel CDN



	DECEMBER 30, 2024

	    React  Components
- React is component based.
- A component comprises of 
	a) Design
	b) Styles
	c) Functionality
- Design is created with HTML.
- Styles are defined with CSS.
- Functionality is configure using JavaScript or TypeScript.
- Component enables
	a) Reusability
	b) Extensibility
	c) Maintainability
	d) Testability 

Creating a Component:
- Component can be created by using JavaScript 
	a) Function
	b) Class

Syntax:
	 function Component()
	 {

	 }

	class Component
	{

	}

- Classes are still supported in React but not recommended in modern code.

Note: JavaScript function topics required for React developer

	- Function Declaration
	- Function Expression
	- Function Signature
	- Function Parameters
	- Function Definition
	- Rest Parameters
	- Spread Operator
	- Function with Return
	- Function Closure 
	- Function Generator
	- Function Recursion 
	- Function Callback
	- Function Promises 
	- Arrow Function
	- Async Function
	- Anonymous Function
	- IIFE Pattern

Component Rules:
1. Component function can't be void.
2. It must return a function with JSX as element. [JavaScript Extension] 
3. JSX uses HTML elements, but configured with a set of rules. 	

	a) Component function must return only one fragment as JSX.
	
				(
				  <h3> Welcome </h3>		=> invalid
				  <p> React 18 </p>
				)


				(
				 <div>
					<h3> Welcome </h3>	=> valid
					<p> React 18 </p>
				 </div>
				)

	  b) JSX can't have void elements defined with only start token.
	  c) JSX elements must have end token.

				<img>			=> invalid
				<img> </img>		=> valid
				<img />			=> valid
				<input>			=> invalid
				<input />			=> valid

	  d) JSX element can't have attributes, you have to configure only properties.

				<img class="img-fluid">			// invalid
				<img className="img-fluild">	// valid

				class		: attribute name
				className	: property name

FAQ: What is difference between attribute & property?
Ans:   Attribute is immutable.
	  Property is mutable.

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <style>
        .bg-style {
            background-color: yellow;
            color:red;
            padding: 10px;
            text-align: center;
        }
    </style>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">

        function NavBar()
        {
            return (
                <div>
                    <h3 className="bg-style">Welcome </h3> 
                    <p>React 18</p>
                </div>
            )
        }


        ReactDOM.render( <NavBar> </NavBar> , document.getElementById("root"));

    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>

Ex:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <style>
       nav {
          background-color: black;
          color:white;
          display: flex;
          justify-content: space-between;
          padding: 10px;
          margin-bottom: 20px;
       }
       nav span {
         margin-right: 20px;
       }
    </style>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">

        function NavBar()
        {
            return (
                <nav>
                    <span>Shopping</span> 
                    <div>
                        <span>Home</span>
                        <span>Shop</span>
                        <span>Blog</span>
                        <span>Pages</span>
                    </div>
                    <div>
                        <span>Signin</span>
                    </div>
                </nav>
            )
        }


        ReactDOM.render( <div> <NavBar/> <NavBar/> <NavBar/> </div> , document.getElementById("root"));

    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>
